//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Player/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Actions"",
            ""id"": ""5bb44850-c951-4ac0-a59d-c01763a60e0e"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""26c554e9-4bee-4c00-aba4-a6e4c0e1aed0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a7d7d78f-3e09-4fc5-b12a-4e44f0097602"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""sonar"",
                    ""type"": ""Button"",
                    ""id"": ""43be8da0-e63d-4a31-80be-0a653209f007"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""select1"",
                    ""type"": ""Button"",
                    ""id"": ""2eae54f4-5866-4612-8891-260b13898300"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""select2"",
                    ""type"": ""Button"",
                    ""id"": ""d305edb5-70c2-4f9d-b773-ed11e280f35c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""select3"",
                    ""type"": ""Button"",
                    ""id"": ""2fbd1ed9-d619-436a-b781-a853d604d66e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pickup"",
                    ""type"": ""Button"",
                    ""id"": ""d980f3a4-3688-45ef-b7b6-1f6197f021be"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WS"",
                    ""id"": ""065c25c4-7886-4ca8-a698-75f18edb16db"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4d7e2f20-c7d8-43d2-b6f9-c3d55d12497f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""dd1b83ed-530e-47a3-ada0-0ff4ed9a2d38"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""9b7aa649-3879-4358-9d52-e91cc0c34644"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""085a3c1a-fb84-439c-a31d-e19cbc3eb695"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d37bb8d5-0444-455a-9419-34dbba220237"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ecdbb58d-5788-4f6e-929a-3cf48a8cf142"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""sonar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ce5f11c-6d88-4705-868e-a3cf85703ae0"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c310756-8cde-4cb5-a459-f47593bac372"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0d1296d-92ea-4b74-b06f-13704070482c"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95f36759-34ef-442a-9b99-6f7f9ce5bf4e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_move = m_Actions.FindAction("move", throwIfNotFound: true);
        m_Actions_rotate = m_Actions.FindAction("rotate", throwIfNotFound: true);
        m_Actions_sonar = m_Actions.FindAction("sonar", throwIfNotFound: true);
        m_Actions_select1 = m_Actions.FindAction("select1", throwIfNotFound: true);
        m_Actions_select2 = m_Actions.FindAction("select2", throwIfNotFound: true);
        m_Actions_select3 = m_Actions.FindAction("select3", throwIfNotFound: true);
        m_Actions_pickup = m_Actions.FindAction("pickup", throwIfNotFound: true);
    }

    ~@PlayerActions()
    {
        UnityEngine.Debug.Assert(!m_Actions.enabled, "This will cause a leak and performance issues, PlayerActions.Actions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Actions
    private readonly InputActionMap m_Actions;
    private List<IActionsActions> m_ActionsActionsCallbackInterfaces = new List<IActionsActions>();
    private readonly InputAction m_Actions_move;
    private readonly InputAction m_Actions_rotate;
    private readonly InputAction m_Actions_sonar;
    private readonly InputAction m_Actions_select1;
    private readonly InputAction m_Actions_select2;
    private readonly InputAction m_Actions_select3;
    private readonly InputAction m_Actions_pickup;
    public struct ActionsActions
    {
        private @PlayerActions m_Wrapper;
        public ActionsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_Actions_move;
        public InputAction @rotate => m_Wrapper.m_Actions_rotate;
        public InputAction @sonar => m_Wrapper.m_Actions_sonar;
        public InputAction @select1 => m_Wrapper.m_Actions_select1;
        public InputAction @select2 => m_Wrapper.m_Actions_select2;
        public InputAction @select3 => m_Wrapper.m_Actions_select3;
        public InputAction @pickup => m_Wrapper.m_Actions_pickup;
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void AddCallbacks(IActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @rotate.started += instance.OnRotate;
            @rotate.performed += instance.OnRotate;
            @rotate.canceled += instance.OnRotate;
            @sonar.started += instance.OnSonar;
            @sonar.performed += instance.OnSonar;
            @sonar.canceled += instance.OnSonar;
            @select1.started += instance.OnSelect1;
            @select1.performed += instance.OnSelect1;
            @select1.canceled += instance.OnSelect1;
            @select2.started += instance.OnSelect2;
            @select2.performed += instance.OnSelect2;
            @select2.canceled += instance.OnSelect2;
            @select3.started += instance.OnSelect3;
            @select3.performed += instance.OnSelect3;
            @select3.canceled += instance.OnSelect3;
            @pickup.started += instance.OnPickup;
            @pickup.performed += instance.OnPickup;
            @pickup.canceled += instance.OnPickup;
        }

        private void UnregisterCallbacks(IActionsActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @rotate.started -= instance.OnRotate;
            @rotate.performed -= instance.OnRotate;
            @rotate.canceled -= instance.OnRotate;
            @sonar.started -= instance.OnSonar;
            @sonar.performed -= instance.OnSonar;
            @sonar.canceled -= instance.OnSonar;
            @select1.started -= instance.OnSelect1;
            @select1.performed -= instance.OnSelect1;
            @select1.canceled -= instance.OnSelect1;
            @select2.started -= instance.OnSelect2;
            @select2.performed -= instance.OnSelect2;
            @select2.canceled -= instance.OnSelect2;
            @select3.started -= instance.OnSelect3;
            @select3.performed -= instance.OnSelect3;
            @select3.canceled -= instance.OnSelect3;
            @pickup.started -= instance.OnPickup;
            @pickup.performed -= instance.OnPickup;
            @pickup.canceled -= instance.OnPickup;
        }

        public void RemoveCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionsActions @Actions => new ActionsActions(this);
    public interface IActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnSonar(InputAction.CallbackContext context);
        void OnSelect1(InputAction.CallbackContext context);
        void OnSelect2(InputAction.CallbackContext context);
        void OnSelect3(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
}
